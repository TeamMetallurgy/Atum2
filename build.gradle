plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
	id 'org.spongepowered.mixin' version '0.7.+'
}

import groovy.json.JsonSlurper
import groovy.json.JsonOutput

java.toolchain.languageVersion = JavaLanguageVersion.of(8)

repositories {
  maven {
    name = "JEI"
    url = "https://dvs1.progwml6.com/files/maven/"
  }
  maven {
    name = "Hwyla"
    url = "https://cursemaven.com"
  }
  maven { 
    name = "CraftTweaker2"
    url = "https://maven.blamejared.com" 
  }
  maven {
    name = "TheOneProbe"
    url = "https://maven.tterrag.com"
  }
  maven {
    name = "Curios"
    url = "https://maven.theillusivec4.top/"
  }
  maven {
    url "https://nexus.resourcefulbees.com/repository/maven-public/"
  }
  flatDir { dirs 'deps' }
}

version = "${minecraft_version}-${mod_version}" + getBuildNumber()
group= "com.teammetallurgy.atum"

base {
    archivesName = "Atum"
}

minecraft {
    mappings channel: 'snapshot', version: project.mappings
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
	  configureEach {
            workingDirectory project.file('run')
			
            arg "-mixin.config=atum.mixins.json"
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                atum {
                    source sourceSets.main
                }
            }
	  }
      client {
      }
      server {
		 args '--nogui'
      }
      data {
          args '--mod', 'atum', '--all', '--output', file("src/generated/resources/"), '--existing', file("src/main/resources/")
      }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
    compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}:api")
    runtimeOnly fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}")
    implementation fg.deobf("curse.maven:hwyla-253449:3033593")
    implementation fg.deobf("com.blamejared.crafttweaker:CraftTweaker-${minecraft_version}:${ct_version}")
    implementation "mcjty.theoneprobe:TheOneProbe-1.16:${top_version}:api"
    runtimeOnly fg.deobf("top.theillusivec4.curios:curios-forge:${minecraft_version}-${curios_version}")
    compileOnly fg.deobf("top.theillusivec4.curios:curios-forge:${minecraft_version}-${curios_version}:api")
    implementation fg.deobf("com.telepathicgrunt:Blame:1.16.5-3.0.2-forge")
}

mixin {
    add sourceSets.main, "atum.refmap.json"
}

tasks.named('jar', Jar).configure {
    manifest {
        attributes([
            "Implementation-Version": "${version}",
            "MixinConfigs": "atum.mixins.json"
        ])
    }
}

task apiJar(type: Jar) {
    from sourceSets.main.allSource
    from sourceSets.main.output
    include 'com/teammetallurgy/atum/api/**/*'
    archiveClassifier = 'api'
}

publishing {
    tasks.publish.dependsOn 'build'
    publications {
        mavenJava(MavenPublication) {
            artifactId "atum2_${minecraft_version}"
            artifact jar
            artifact apiJar
        }
    }
    repositories {
        if (project.hasProperty('maven_repo')) {
            maven { url maven_repo }
        } else {
            mavenLocal()
        }
    }
}

artifacts {
    archives apiJar
}

String getBuildNumber() {
    return System.getenv('BUILD_NUMBER') ? ".jenkins" + System.getenv('BUILD_NUMBER') : "";
}

tasks.named('processResources', ProcessResources).configure {
    // Minifies all .json files when building the mod.
    // Source files are not minified, only the jar copies.
	doLast {
	    def jsonMinifyStart = System.currentTimeMillis()
	    def jsonMinified = 0
		def jsonBytesSaved = 0
		
	    fileTree(dir: outputs.files.asPath, include: '**/*.json').each {
			File file = it
			jsonMinified++
			def oldLength = file.length()
			file.text = JsonOutput.toJson(new JsonSlurper().parse(file))
			jsonBytesSaved += oldLength - file.length()
		}
		println('Minified ' + jsonMinified + ' json files. Saved ' + jsonBytesSaved + ' bytes. Took ' + (System.currentTimeMillis() - jsonMinifyStart) + 'ms.')
	}
}
tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}