buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '4.1.+', changing: true
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'maven-publish'
apply plugin: 'org.spongepowered.mixin'

import groovy.json.JsonSlurper
import groovy.json.JsonOutput

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

repositories {
  maven {
    name = "JEI"
    url = "https://dvs1.progwml6.com/files/maven/"
  }
  maven {
    name = "Hwyla"
    url = "https://maven.tehnut.info"
  }
  maven { 
    name = "CraftTweaker2"
    url = "https://maven.blamejared.com" 
  }
  maven {
    name = "TheOneProbe"
    url = "https://maven.tterrag.com"
  }
  maven {
    name = "Curios"
    url = "https://maven.theillusivec4.top/"
  }
  maven {
    url "https://nexus.resourcefulbees.com/repository/maven-public/"
  }
  flatDir { dirs 'deps' }
}

version = "${minecraft_version}-${mod_version}" + getBuildNumber()
group= "com.teammetallurgy.atum"
archivesBaseName = "Atum"

minecraft {
    mappings channel: 'snapshot', version: project.mappings
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            arg "-mixin.config=atum.mixins.json"
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                atum {
                    source sourceSets.main
                }
            }
        }
        server {
            workingDirectory project.file('run')
            arg "-mixin.config=atum.mixins.json"
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                atum {
                    source sourceSets.main
                }
            }
        }
        data {
            workingDirectory project.file('run')
            args '--mod', 'atum', '--all', '--output', file("src/generated/resources/"), '--existing', file("src/main/resources/")
            mods {
                atum {
                    source sourceSets.main
                }
            }
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}:api")
    runtimeOnly fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}")
    compile fg.deobf("mcp.mobius.waila:Hwyla:${hwyla_version}")
    compileOnly fg.deobf("com.blamejared.crafttweaker:CraftTweaker-${minecraft_version}:${ct_version}")
    compile "mcjty.theoneprobe:TheOneProbe-1.16:${top_version}:api"
    runtimeOnly fg.deobf("top.theillusivec4.curios:curios-forge:${minecraft_version}-${curios_version}")
    compileOnly fg.deobf("top.theillusivec4.curios:curios-forge:${minecraft_version}-${curios_version}:api")
    implementation fg.deobf("com.telepathicgrunt:Blame:1.16.5-3.0.2-forge")
}

mixin {
    add sourceSets.main, "atum.refmap.json"
}

jar {
    manifest {
        attributes([
            "Implementation-Version": "${version}",
            "MixinConfigs": "atum.mixins.json"
        ])
    }
}

task apiJar(type: Jar) {
    from sourceSets.main.allSource
    from sourceSets.main.output
    include 'com/teammetallurgy/atum/api/**/*'
    classifier = 'api'
}

publishing {
    tasks.publish.dependsOn 'build'
    publications {
        mavenJava(MavenPublication) {
            artifactId "atum2_${minecraft_version}"
            artifact jar
            artifact apiJar
        }
    }
    repositories {
        if (project.hasProperty('maven_repo')) {
            maven { url maven_repo }
        } else {
            mavenLocal()
        }
    }
}

artifacts {
    archives apiJar
}

String getBuildNumber() {
    return System.getenv('BUILD_NUMBER') ? ".jenkins" + System.getenv('BUILD_NUMBER') : "";
}

processResources {
    // Minifies all .json files when building the mod.
    // Source files are not minified, only the jar copies.
	doLast {
	    def jsonMinifyStart = System.currentTimeMillis()
	    def jsonMinified = 0
		def jsonBytesSaved = 0
		
	    fileTree(dir: outputs.files.asPath, include: '**/*.json').each {
			File file = it
			jsonMinified++
			def oldLength = file.length()
			file.text = JsonOutput.toJson(new JsonSlurper().parse(file))
			jsonBytesSaved += oldLength - file.length()
		}
		println('Minified ' + jsonMinified + ' json files. Saved ' + jsonBytesSaved + ' bytes. Took ' + (System.currentTimeMillis() - jsonMinifyStart) + 'ms.')
	}
}